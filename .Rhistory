knitr::opts_chunk$set(echo = TRUE,
error = TRUE,
warning = FALSE,
message = FALSE,
cache = FALSE,
fig.align = "center")
library(pliman)
library(tidyverse)
setwd("E:/Desktop/UFSC/cursos/pliman_rbras67")
# set_pliman_viewer("mapview")
leaves <- image_import("leaves.jpg", plot = TRUE)
crop <- image_autocrop(leaves, plot = TRUE)
# crop <- image_crop(leaves, viewer = "mapview")
crop <- image_crop(leaves,
width = 137:912,
height = 59:739)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
error = TRUE,
warning = FALSE,
message = FALSE,
cache = FALSE,
fig.align = "center")
# Chunk 2
library(pliman)
library(tidyverse)
setwd("E:/Desktop/UFSC/cursos/pliman_rbras67")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
error = TRUE,
warning = FALSE,
message = FALSE,
cache = FALSE,
fig.align = "center")
# Chunk 2
library(pliman)
library(tidyverse)
setwd("E:/Desktop/UFSC/cursos/pliman_rbras67")
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
back_fore_index =  "R/(G/B)", # default
fore_ref_index = "B-R", # default
reference_area = 20,
watershed = FALSE,
filter = 2,
parallel = TRUE)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
back_fore_index =  "R/(G/B)", # default
fore_ref_index = "B-R", # default
reference_area = 20,
watershed = FALSE,
filter = 2,
parallel = TRUE)
#| out-width: "100%"
flax <- image_import("flax_af/A2_32_3.jpg", plot = TRUE)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
back_fore_index =  "R/(G/B)", # default
fore_ref_index = "B-R", # default
reference_area = 20,
watershed = FALSE,
filter = 2,
parallel = FALSE)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
back_fore_index =  "R/(G/B)", # default
fore_ref_index = "B-R", # default
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE
parallel = TRUE)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
back_fore_index =  "R/(G/B)", # default
fore_ref_index = "B-R", # default
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE,
parallel = TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(pliman)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
back_fore_index =  "R/(G/B)", # default
fore_ref_index = "B-R", # default
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE,
parallel = TRUE)
library(pliman)
library(tidyverse)
setwd("D:/Desktop/UFSC/cursos/pliman67rbras")
set_wd_here()
# set_pliman_viewer("mapview")
# Analisar os objetos
res <-
analyze_objects(pattern = "P",
dir_original = "flax_grain",
dir_processed = "proc",
reference = TRUE,
reference_larger = TRUE,
reference_area = 6,
index = "GRAY",
show_contour = FALSE,
marker = "point",
save_image = TRUE)
# Analisar os objetos
res <-
analyze_objects(pattern = "P",
dir_original = "flax_grain",
dir_processed = "proc",
# reference = TRUE,
# reference_larger = TRUE,
# reference_area = 6,
index = "GRAY",
show_contour = FALSE,
marker = "point",
plot = FALSE,
# save_image = TRUE,
parallel = TRUE)
# Analisar os objetos
res <-
analyze_objects(pattern = "P",
dir_original = "flax_grain",
dir_processed = "proc",
reference = TRUE,
reference_larger = TRUE,
reference_area = 6,
index = "GRAY",
show_contour = FALSE,
marker = "point",
plot = FALSE,
# save_image = TRUE,
parallel = TRUE)
set_wd_here("flax_af")
apply_fun_to_imgs(pattern = "A",
image_resize,
rel_size = 70)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE)
setwd("D:/Desktop/UFSC/cursos/pliman67rbras")
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE)
merged <- get_measures(res)
# Organizar os dados para ajuste do modelo Logístico
df_plot <-
merged$summary |>
separate_col(img,
into = c("avaliacao", "das", "bloco")) |>
mutate(das = as.numeric(das))
formula <- y ~ b1/(1 + exp(b2 - b3 * x))
ggplot(df_plot, aes(das, area_sum)) +
geom_smooth(method = "nls",
method.args = list(formula = formula,
start = c(b1 = 248,
b2 = 6,
b3 = 0.07)),
se = FALSE,
color = "red") +
stat_summary(fun.data = mean_se,
geom = "errorbar",
width = 0.5) +
stat_summary(fun = mean,
geom = "point",
col = "blue",
size = 3) +
scale_x_continuous(breaks = unique(df_plot$das)) +
scale_y_continuous(breaks = seq(0, 150, by = 25)) +
labs(x = "Days after sowing",
y = expression(Área~foliar~média~(cm^2~planta^{-1}))) +
theme_bw(base_size = 16) +
theme(panel.grid = element_blank())
# Analisar os objetos
res <-
analyze_objects(pattern = "P",
dir_original = "flax_grain",
dir_processed = "proc",
reference = TRUE,
reference_larger = TRUE,
reference_area = 6,
index = "GRAY",
show_contour = FALSE,
marker = "point",
plot = FALSE,
save_image = TRUE,
parallel = TRUE)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
dir_original = "flax_af",
reference = TRUE,
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE,
parallel = TRUE)
merged <- get_measures(res)
# Organizar os dados para ajuste do modelo Logístico
df_plot <-
merged$summary |>
separate_col(img,
into = c("avaliacao", "das", "bloco")) |>
mutate(das = as.numeric(das))
formula <- y ~ b1/(1 + exp(b2 - b3 * x))
ggplot(df_plot, aes(das, area_sum)) +
geom_smooth(method = "nls",
method.args = list(formula = formula,
start = c(b1 = 248,
b2 = 6,
b3 = 0.07)),
se = FALSE,
color = "red") +
stat_summary(fun.data = mean_se,
geom = "errorbar",
width = 0.5) +
stat_summary(fun = mean,
geom = "point",
col = "blue",
size = 3) +
scale_x_continuous(breaks = unique(df_plot$das)) +
scale_y_continuous(breaks = seq(0, 150, by = 25)) +
labs(x = "Dias após a semeadura",
y = expression(Área~foliar~média~(cm^2~planta^{-1}))) +
theme_bw(base_size = 16) +
theme(panel.grid = element_blank())
# imagem
img <-
image_import("potatoes.tif", path = "orthomosaic") |>
image_horizontal()
plot(img)
# preparar a imagem
# Somente iterativo
# prep <- image_prepare_mv(img)
prep <-
img |>
image_rotate(-2.076, plot = FALSE) |>
image_crop(width = 194:1075,
height = 143:379,
plot = TRUE)
# índice para segmentação
image_index(prep, index =  "HUE")
res <-
analyze_objects_shp(prep,
nrow = 16,
ncol = 9,
index = "HUE",
object_index = c("NGRDI", "DGCI"))
# cobertura de solo
plot_index_shp(res)
# resumir as informações
results <- get_measures(res)
# Nível de parcela
plot_index_shp(res, attribute = "NGRDI")
# Nível de pixel
plot_index(object = res, index = "DGCI")
# imagem
stand <- image_import("stand.jpg", path = "orthomosaic", plot = TRUE)
# índice para segmentação
image_segment(stand, "HUE")
image_segment(stand, "NGRDI")
image_segment(stand, "NGRDI", invert = TRUE)
res <-
analyze_objects_shp(stand,
index = "NGRDI",
invert = TRUE,
nrow = 7,
ncol = 1)
par(mfrow = c(1, 2))
# cobertura de solo
plot_index_shp(res)
# mapeamento das plantas (distâncias e CV(%))
object_mark(res)
mapped <-  object_map(res)
# coeficiente de variação dentro da linha
barplot(mapped$cvs)
par(mfrow = c(1, 1))
sev4 <-
measure_disease(pattern = "soy_",
dir_original = "soybean_rust",
plot = FALSE,
index_lb = "B",
index_dh = "NGRDI",
threshold = c("Otsu", 0),
parallel = TRUE)
library(pliman)
library(tidyverse)
set_wd_here()
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
back_fore_index = "R/(B/G)",
fore_ref_index = "B-R",
dir_original = "flax_af",
reference = TRUE,
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE,
parallel = TRUE)
# Note que agora o processamento é realizado de forma paralela
res <-
analyze_objects(pattern = "A",
back_fore_index = "R/(G/B)",
fore_ref_index = "B-R",
dir_original = "flax_af",
reference = TRUE,
reference_area = 20,
watershed = FALSE,
filter = 2,
plot = FALSE,
parallel = TRUE)
# em lote (utilizando as paletas)
sev3 <-
measure_disease(pattern = "soy_",
dir_original = "soybean_rust",    # pasta com as imagens originais
dir_processed = "proc_rust",      # pasta com as imagens processadas
save_image = TRUE,
plot = FALSE,
img_healthy = pals$soja_h.png,
img_symptoms = pals$soja_s.png,
img_background = pals$soja_b.png,
parallel = TRUE)
library(pliman)
library(tidyverse)
setwd("D:/Desktop/UFSC/cursos/pliman67rbras")
# em lote (utilizando as paletas)
sev3 <-
measure_disease(pattern = "soy_",
dir_original = "soybean_rust",    # pasta com as imagens originais
dir_processed = "proc_rust",      # pasta com as imagens processadas
save_image = TRUE,
plot = FALSE,
img_healthy = pals$soja_h.png,
img_symptoms = pals$soja_s.png,
img_background = pals$soja_b.png,
parallel = TRUE)
pals <- image_import(pattern = "soja_",
path = "soybean_rust",
plot = TRUE,
ncol = 3)
# em lote (utilizando as paletas)
sev3 <-
measure_disease(pattern = "soy_",
dir_original = "soybean_rust",    # pasta com as imagens originais
dir_processed = "proc_rust",      # pasta com as imagens processadas
save_image = TRUE,
plot = FALSE,
img_healthy = pals$soja_h.png,
img_symptoms = pals$soja_s.png,
img_background = pals$soja_b.png,
parallel = TRUE)
sev4 <-
measure_disease(pattern = "soy_",
dir_original = "soybean_rust",
plot = FALSE,
index_lb = "B",
index_dh = "NGRDI",
threshold = c("Otsu", 0),
parallel = TRUE)
sev3$severity$symptomatic
df <-
rbind(
data.frame(método = "Paletas", severidade = sev3$severity$symptomatic),
data.frame(método = "Índices", severidade = sev4$severity$symptomatic)
)
df
df <-
data.frame(paletas = sev3$severity$symptomatic,
índices = sev4$severity$symptomatic)
df
ggplot(df, aes(paletas, índices)) +
geom_abline(intercept = 0, slope = 1)
ggplot(df, aes(paletas, índices)) +
geom_point() +
geom_abline(intercept = 0, slope = 1)
ggplot(df, aes(paletas, índices)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_bw()
ggplot(df, aes(paletas, índices)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
theme_bw(base_size = 16)
ggplot(df, aes(paletas, índices)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
theme_bw(base_size = 16)
ggplot(df, aes(paletas, índices)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
theme_bw(base_size = 16) +
coord_equal()
ggplot(df, aes(paletas, índices)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
theme_bw(base_size = 16) +
xlim(0, 100) +
ylim(0, 100) +
coord_equal()
folha_grid <- image_import("disease_shp.jpg", plot = TRUE)
